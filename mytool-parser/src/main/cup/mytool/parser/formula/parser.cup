/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package mytool.parser.formula;

import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    protected scanner s;
    public parser(scanner s){ this.s=s; }
:}

// define how to connect to the scanner!
init with {: 
	// s.init(); 
:};

scan with {: 
	return s.next_token(); 
:};

// Terminals (tokens returned by the scanner). 
terminal            PLUS, MINUS, TIMES, DIV, LPAREN, RPAREN, AT, DOT, EQ;
terminal Integer    NUMBER;        // our scanner provides numbers
terminal String     IDENTIFIER;
// Non terminals 
non terminal CupExpr    expr;      // used to store evaluated subexpressions
non terminal CupFormula formula;

// Precedences 
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIV;
precedence left AT;
precedence left DOT;


// The grammar rules
formula ::= IDENTIFIER:e1 EQ expr:e2         {: RESULT = CupFormula.valueOf(e1,e2);  :}
;
expr ::= expr:e1 PLUS expr:e2      	        {:  RESULT = CupExpr.plus(e1,e2);       :}
	| expr:e1 MINUS expr:e2        	        {:  RESULT = CupExpr.minus(e1,e2);       :}
	| expr:e1 TIMES expr:e2        	        {:  RESULT = CupExpr.times(e1,e2);       :}
	| expr:e1 DIV expr:e2          	        {:  RESULT = CupExpr.div(e1,e2);        :}
	| MINUS expr:e                 	        {:  RESULT = CupExpr.minus(e);              :}
	| LPAREN expr:e RPAREN	                {:  RESULT = CupExpr.paren(e);           :}
	| NUMBER:n	                            {:  RESULT = CupExpr.number(n);           :}
	| IDENTIFIER:tx DOT IDENTIFIER:id       {:  RESULT = CupExpr.metric(tx,id);          :}
;
