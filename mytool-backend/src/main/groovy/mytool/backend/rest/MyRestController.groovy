package mytool.backend.rest

import groovy.transform.CompileStatic
import mytool.backend.service.ConfigService
import mytool.backend.service.CorpListService
import mytool.backend.service.TaskService
import mytool.collector.database.DataBaseService
import mytool.collector.database.Tables
import mytool.collector.util.EnvUtil
import mytool.collector.wash.WashedFileLoader
import mytool.collector.xueqiu.v5.XQV5DataCollector
import mytool.collector.xueqiu.v5.XQV5DataWasher
import mytool.util.jdbc.JdbcAccessTemplate
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.web.bind.annotation.GetMapping

/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */

import org.springframework.web.bind.annotation.RestController

import java.nio.charset.Charset
import java.sql.Connection

@RestController
@CompileStatic
class MyRestController {

    @Autowired
    CorpListService corpListService

    @Autowired
    TaskService taskService

    @Autowired
    ConfigService configService

    @GetMapping("corpList")
    List<String> corpList() {
        return corpListService.corpList()
    }

    @GetMapping("taskInfos")
    List<TaskService.TaskInfo> taskInfoList() {
        return taskService.taskInfoList()
    }

    @GetMapping("cancel")
    boolean cancel(String id) {
        return taskService.cancel(id)
    }

    @GetMapping("collect")
    TaskService.TaskInfo collect() {
        File folder = configService.getDataFolder("xueqiuv5", "raw")
        XQV5DataCollector dc = new XQV5DataCollector(folder)
        dc.cookie(configService.getXueQiuToken())
        dc.types(XQV5DataCollector.balance, XQV5DataCollector.income, XQV5DataCollector.cash_flow)
        dc.pauseInterval(1 * 1000)
        List<String> corpCodeL = this.corpListService.corpList()
        dc.corpCodes(corpCodeL)
        return taskService.addTask("collect", dc)

    }

    @GetMapping("wash")
    TaskService.TaskInfo wash() {
        File folder = configService.getDataFolder("xueqiuv5", "raw")
        File folder2 = configService.getDataFolder("xueqiuv5", "washed")
        XQV5DataWasher w = new XQV5DataWasher(folder, Charset.forName("UTF-8"), folder2);
        w.types(XQV5DataCollector.balance, XQV5DataCollector.income, XQV5DataCollector.cash_flow)

        return taskService.addTask("wash", w)
    }
    @GetMapping("load")
    TaskService.TaskInfo load() {

        File folder = configService.getDataFolder("xueqiuv5", "washed")

        DataBaseService dbs = DataBaseService.getInstance(EnvUtil.getDataDir(), EnvUtil.getDbName());
        dbs.execute(new JdbcAccessTemplate.JdbcOperation<Object>() {

            @Override
            public Object execute(Connection con, JdbcAccessTemplate t) {
                String sql = "select * from " + Tables.TN_ALIAS_INFO;
                List<Object[]> rst = t.executeQuery(con, sql);
                for (Object[] row : rst) {
                    System.out.println(Arrays.asList(row));
                }
                return rst;
            }
        }, false);
        WashedFileLoader.WashedFileLoadContext flc = new WashedFileLoader.WashedFileLoadContext(dbs);

        return taskService.addTask("load", {
            new WashedFileLoader().load(folder, flc);
        })
    }


}
