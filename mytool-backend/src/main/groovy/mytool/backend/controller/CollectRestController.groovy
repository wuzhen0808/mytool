package mytool.backend.controller

import groovy.transform.CompileStatic
import mytool.backend.service.ConfigService
import mytool.backend.service.CorpListService
import mytool.backend.service.DataCollectService
import mytool.backend.service.DataService
import mytool.backend.service.TaskService
import mytool.collector.database.ReportDataAccessor
import mytool.collector.wash.WashedFileLoader
import mytool.collector.xueqiu.v5.XQV5DataCollector
import mytool.collector.xueqiu.v5.XQV5DataWasher
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController

import java.nio.charset.Charset

/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */

@RestController
@CompileStatic
@RequestMapping("/v1/collect")
class CollectRestController {

    @Autowired
    CorpListService corpListService

    @Autowired
    TaskService taskService

    @Autowired
    ConfigService configService

    @Autowired
    DataService dataService

    @Autowired
    DataCollectService dataCollectService

    @GetMapping("taskInfos")
    List<TaskService.TaskInfo> taskInfoList() {
        return taskService.taskInfoList()
    }

    @GetMapping("cancel")
    boolean cancel(String id) {
        return taskService.cancel(id)
    }

    @GetMapping("collect")
    TaskService.TaskInfo collect() {
        return dataCollectService.collectAll(null)
    }

    @GetMapping("wash")
    TaskService.TaskInfo wash() {
        File folder = configService.getDataFolder("xueqiuv5", "raw")
        File folder2 = configService.getDataFolder("xueqiuv5", "washed")
        XQV5DataWasher w = new XQV5DataWasher(folder, Charset.forName("UTF-8"), folder2);
        w.types(XQV5DataCollector.balance, XQV5DataCollector.income, XQV5DataCollector.cash_flow)

        return taskService.addTask("wash", w)
    }

    @GetMapping("load")
    TaskService.TaskInfo load() {
        File folder = configService.getDataFolder("xueqiuv5", "washed")
        ReportDataAccessor reportDataAccessor = dataService.getReportDataAccessor()
        WashedFileLoader.WashedFileLoadContext flc = new WashedFileLoader.WashedFileLoadContext(reportDataAccessor);
        return taskService.addTask("load", {
            new WashedFileLoader().load(folder, flc);
        })
    }
    @GetMapping("refresh")
    void refresh(@RequestParam(name = "corpId", required = true) String corpId) {
        dataCollectService.refresh(corpId)
    }


}
